// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: f9VC6U83GUs6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: xwgFLXqL07mD/component
import { Button } from "@plasmicpkgs/antd/skinny/registerButton";
import Button2 from "../../Button"; // plasmic-import: FZ59S2Z_LV2k/component
import Switch from "../../Switch"; // plasmic-import: hHE4D7ugAvRd/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicAuthComponent.module.css"; // plasmic-import: f9VC6U83GUs6/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: TfB627kbYt5s/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: BLgPkmgd4hOv/icon
import Rolling1X10S200Px200PxsvgIcon from "./icons/PlasmicIcon__Rolling1X10S200Px200Pxsvg"; // plasmic-import: CfMMOMbkSfDj/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 6EplYmkkN57M/icon

createPlasmicElementProxy;

export type PlasmicAuthComponent__VariantMembers = {
  isSignUpFlow: "isSignUpFlow";
  isError: "isError";
  isLoading: "isLoading";
};
export type PlasmicAuthComponent__VariantsArgs = {
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isError?: SingleBooleanChoiceArg<"isError">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
};
type VariantPropType = keyof PlasmicAuthComponent__VariantsArgs;
export const PlasmicAuthComponent__VariantProps = new Array<VariantPropType>(
  "isSignUpFlow",
  "isError",
  "isLoading"
);

export type PlasmicAuthComponent__ArgsType = {
  errorMessage?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAuthComponent__ArgsType;
export const PlasmicAuthComponent__ArgProps = new Array<ArgPropType>(
  "errorMessage"
);

export type PlasmicAuthComponent__OverridesType = {
  root?: Flex__<"div">;
  emailInput?: Flex__<typeof TextInput>;
  passwordInput?: Flex__<typeof TextInput>;
  svg?: Flex__<"svg">;
  submitButton?: Flex__<typeof Button>;
  button?: Flex__<typeof Button2>;
  h5?: Flex__<"h5">;
  _switch?: Flex__<typeof Switch>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultAuthComponentProps {
  errorMessage?: React.ReactNode;
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isError?: SingleBooleanChoiceArg<"isError">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuthComponent__RenderFunc(props: {
  variants: PlasmicAuthComponent__VariantsArgs;
  args: PlasmicAuthComponent__ArgsType;
  overrides: PlasmicAuthComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isSignUpFlow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSignUpFlow
      },
      {
        path: "isError",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isError
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isLoading
      },
      {
        path: "_switch.isOn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisError]: hasVariant($state, "isError", "isError"),
          [sty.rootisError_isLoading]:
            hasVariant($state, "isLoading", "isLoading") &&
            hasVariant($state, "isError", "isError"),
          [sty.rootisLoading]: hasVariant($state, "isLoading", "isLoading"),
          [sty.rootisSignUpFlow]: hasVariant(
            $state,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__aLJlu)}>
        <div className={classNames(projectcss.all, sty.freeBox__kzxqf)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fu39V)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uwwQu,
                {
                  [sty.textisSignUpFlow__uwwQuPPyrn]: hasVariant(
                    $state,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                }
              )}
            >
              {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                ? "Sign Up"
                : "Login"}
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__wNrqB, {
                [sty.freeBoxisError__wNrqBy7MDj]: hasVariant(
                  $state,
                  "isError",
                  "isError"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__souSm, {
                  [sty.freeBoxisError__souSmY7MDj]: hasVariant(
                    $state,
                    "isError",
                    "isError"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__plQdr, {
                    [sty.freeBoxisError__plQdrY7MDj]: hasVariant(
                      $state,
                      "isError",
                      "isError"
                    )
                  })}
                >
                  {renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3PLoz
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FF0000", fontWeight: 700 }}
                          >
                            {"Error message"}
                          </span>
                        </React.Fragment>
                      </div>
                    ),
                    value: args.errorMessage
                  })}
                </div>
              </div>
            </div>
            <TextInput
              data-plasmic-name={"emailInput"}
              data-plasmic-override={overrides.emailInput}
              autoFocus={
                hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                  ? true
                  : undefined
              }
              className={classNames("__wab_instance", sty.emailInput, {
                [sty.emailInputisSignUpFlow]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              })}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["emailInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Enter your email"}
              type={"email"}
              value={
                generateStateValueProp($state, ["emailInput", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"passwordInput"}
              data-plasmic-override={overrides.passwordInput}
              className={classNames("__wab_instance", sty.passwordInput, {
                [sty.passwordInputisSignUpFlow]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              })}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["passwordInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Enter your password"}
              type={"password"}
              value={
                generateStateValueProp($state, ["passwordInput", "value"]) ?? ""
              }
            />

            <Rolling1X10S200Px200PxsvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgisLoading]: hasVariant($state, "isLoading", "isLoading")
              })}
              role={"img"}
            />

            <Button
              data-plasmic-name={"submitButton"}
              data-plasmic-override={overrides.submitButton}
              className={classNames("__wab_instance", sty.submitButton, {
                [sty.submitButtonisLoading]: hasVariant(
                  $state,
                  "isLoading",
                  "isLoading"
                )
              })}
              danger={false}
              loading={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ftF,
                  {
                    [sty.textisLoading__ftFdXOhM]: hasVariant(
                      $state,
                      "isLoading",
                      "isLoading"
                    ),
                    [sty.textisSignUpFlow__ftFPPyrn]: hasVariant(
                      $state,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  }
                )}
              >
                {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                  ? "Sign up"
                  : "Login"}
              </div>
            </Button>
            <div className={classNames(projectcss.all, sty.freeBox__ePKyb)}>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__k1Z9V,
                  {
                    [sty.linkisSignUpFlow__k1Z9VpPyrn]: hasVariant(
                      $state,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                  ? "I already have an account"
                  : "Forgot your password ?"}
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3SMdV,
                  {
                    [sty.textisSignUpFlow___3SMdVpPyrn]: hasVariant(
                      $state,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  }
                )}
              >
                {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                  ? "I already have an account"
                  : "Don't have an account"}
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__ezWnS,
                  {
                    [sty.linkisSignUpFlow__ezWnSpPyrn]: hasVariant(
                      $state,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  }
                )}
                component={Link}
                href={
                  hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                    ? `/login`
                    : `/signup`
                }
                platform={"nextjs"}
              >
                <Button2
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button, {
                    [sty.buttonisSignUpFlow]: hasVariant(
                      $state,
                      "isSignUpFlow",
                      "isSignUpFlow"
                    )
                  })}
                  color={"link"}
                >
                  {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                    ? "Login here"
                    : "Sign Up here"}
                </Button2>
              </PlasmicLink__>
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__pkG1C)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4Rghs
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h5
                    data-plasmic-name={"h5"}
                    data-plasmic-override={overrides.h5}
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"What is Proliga?"}
                      </span>
                    </React.Fragment>
                  </h5>
                }
                <React.Fragment>
                  {
                    "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum ..."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__up1Xs)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___9CPhk
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"show more"}
              </PlasmicLink__>
              <Switch
                data-plasmic-name={"_switch"}
                data-plasmic-override={overrides._switch}
                className={classNames("__wab_instance", sty._switch)}
                isOn={generateStateValueProp($state, ["_switch", "isOn"])}
                onIsOnChange={generateStateOnChangeProp($state, [
                  "_switch",
                  "isOn"
                ])}
              />
            </Stack__>
            {(() => {
              try {
                return $state._switch.isOn;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hfdz4
                )}
              >
                {
                  " has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
                }
              </div>
            ) : null}
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__wlu9Z)}>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
          2, 3, 4
        ]).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              height={"100"}
              key={currentIndex}
              loading={"lazy"}
              src={(() => {
                try {
                  return "https://i.pinimg.com/564x/48/49/ba/4849ba2ea6517f805785071120cccc08.jpg";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "https://i.pinimg.com/564x/48/49/ba/4849ba2ea6517f805785071120cccc08.jpg";
                  }
                  throw e;
                }
              })()}
              width={"100"}
            />
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "emailInput",
    "passwordInput",
    "svg",
    "submitButton",
    "button",
    "h5",
    "_switch",
    "img"
  ],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  svg: ["svg"],
  submitButton: ["submitButton"],
  button: ["button"],
  h5: ["h5"],
  _switch: ["_switch"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  emailInput: typeof TextInput;
  passwordInput: typeof TextInput;
  svg: "svg";
  submitButton: typeof Button;
  button: typeof Button2;
  h5: "h5";
  _switch: typeof Switch;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthComponent__VariantsArgs;
    args?: PlasmicAuthComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthComponent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAuthComponent__ArgProps,
          internalVariantPropNames: PlasmicAuthComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuthComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthComponent";
  } else {
    func.displayName = `PlasmicAuthComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthComponent = Object.assign(
  // Top-level PlasmicAuthComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    svg: makeNodeComponent("svg"),
    submitButton: makeNodeComponent("submitButton"),
    button: makeNodeComponent("button"),
    h5: makeNodeComponent("h5"),
    _switch: makeNodeComponent("_switch"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicAuthComponent
    internalVariantProps: PlasmicAuthComponent__VariantProps,
    internalArgProps: PlasmicAuthComponent__ArgProps
  }
);

export default PlasmicAuthComponent;
/* prettier-ignore-end */
