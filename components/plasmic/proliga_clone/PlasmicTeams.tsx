// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: MiYb6Bkn-8fe

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import UpdateCapitan from "../../UpdateCapitan"; // plasmic-import: XWByMSCmxs7g/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import AvatarPlayer from "../../AvatarPlayer"; // plasmic-import: 4QnaRcOLXj0D/component
import SoccerPlaceMens2 from "../../SoccerPlaceMens2"; // plasmic-import: xodLqMOhDs29/component
import PlayerPickerRow from "../../PlayerPickerRow"; // plasmic-import: NaQtMjgilBY9/component
import SideBarMyTeam from "../../SideBarMyTeam"; // plasmic-import: 7ylFTnxhQETY/component
import Footer from "../../Footer"; // plasmic-import: kIdovXGtWiEz/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_8Rmrqs5Mzp6I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8Rmrqs5Mzp6I/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicTeams.module.css"; // plasmic-import: MiYb6Bkn-8fe/css

createPlasmicElementProxy;

export type PlasmicTeams__VariantMembers = {};
export type PlasmicTeams__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeams__VariantsArgs;
export const PlasmicTeams__VariantProps = new Array<VariantPropType>();

export type PlasmicTeams__ArgsType = {};
type ArgPropType = keyof PlasmicTeams__ArgsType;
export const PlasmicTeams__ArgProps = new Array<ArgPropType>();

export type PlasmicTeams__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  modal?: Flex__<typeof AntdModal>;
  updateCapitan?: Flex__<typeof UpdateCapitan>;
  columns?: Flex__<"div">;
  _532?: Flex__<typeof AntdDropdown>;
  goa?: Flex__<"div">;
  def?: Flex__<"div">;
  mid?: Flex__<"div">;
  str?: Flex__<"div">;
  soccerPlaceMens2?: Flex__<typeof SoccerPlaceMens2>;
  playerPickerRow?: Flex__<typeof PlayerPickerRow>;
  sideBarMyTeam?: Flex__<typeof SideBarMyTeam>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultTeamsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTeams__RenderFunc(props: {
  variants: PlasmicTeams__VariantsArgs;
  args: PlasmicTeams__ArgsType;
  overrides: PlasmicTeams__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "inputState",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "DEF"
      },
      {
        path: "teamplayerstate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sellBtnBool",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "playerId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "capitanBtnVisibility",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    teamP: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "f2c281a8-38ed-48b3-ba38-e7231daa5b27",
        userArgs: {},
        cacheKey: `plasmic.$.f2c281a8-38ed-48b3-ba38-e7231daa5b27.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    goa: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "29d74613-54ba-4cc4-be49-65113419c637",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.29d74613-54ba-4cc4-be49-65113419c637.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    player: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "1d0b7867-0ce2-4787-a529-89ca47095a81",
        userArgs: {},
        cacheKey: `plasmic.$.1d0b7867-0ce2-4787-a529-89ca47095a81.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    def: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "c7d4d263-b030-4b91-9747-74e8333a1692",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.c7d4d263-b030-4b91-9747-74e8333a1692.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    mid: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "6bdd93d5-cbe1-4513-9e93-4dd708ab47ff",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.6bdd93d5-cbe1-4513-9e93-4dd708ab47ff.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    str: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "8ed66bc2-bbd7-4865-ac90-a1928fef354e",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.8ed66bc2-bbd7-4865-ac90-a1928fef354e.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    teamPlayer: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "0587a83a-421e-4952-9de7-8fda9765b854",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.0587a83a-421e-4952-9de7-8fda9765b854.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    clubs: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "27028f27-27b7-4991-8695-0bfb15c4a008",
        userArgs: {},
        cacheKey: `plasmic.$.27028f27-27b7-4991-8695-0bfb15c4a008.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    pickplayer: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "a5125adb-bfa7-44e1-93f4-3e0b2b9b670c",
        userArgs: {
          filters: [$state.inputState]
        },
        cacheKey: `plasmic.$.a5125adb-bfa7-44e1-93f4-3e0b2b9b670c.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    pickedPlayersCount: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "dc06ce2a-bfaa-450c-9107-6eaef3b16d33",
        userArgs: {
          filters: [$queries.teamP.data[0].id]
        },
        cacheKey: `plasmic.$.dc06ce2a-bfaa-450c-9107-6eaef3b16d33.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8Rmrqs5Mzp6I()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cstxG)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__p3Od
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Team"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__oBeLp
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Points"}
            </PlasmicLink__>
            <div className={classNames(projectcss.all, sty.freeBox__cynQa)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jGxnO
                )}
              >
                {"Balance"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mbNo
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "$" + $queries.teamP.data[0].balance;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal)}
              closeButtonClassName={classNames({
                [sty["pcls_Dx5cv0NQahko"]]: true
              })}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              maskClosable={true}
              modalContentClassName={classNames({
                [sty["pcls_ssjnNtDHYMdD"]]: true
              })}
              modalScopeClassName={sty["modal__modal"]}
              okText={"Sell"}
              onOk={async () => {
                const $steps = {};

                $steps["postgresUpdateById"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "8cdHi4ivRUEkK6qbegQevF",
                          opId: "784d036a-6f3d-4248-a27d-1b8ba3616ac8",
                          userArgs: {
                            keys: [$state.teamplayerstate],
                            variables: [null]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["postgresUpdateById"] != null &&
                  typeof $steps["postgresUpdateById"] === "object" &&
                  typeof $steps["postgresUpdateById"].then === "function"
                ) {
                  $steps["postgresUpdateById"] = await $steps[
                    "postgresUpdateById"
                  ];
                }

                $steps["revertMoney"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "8cdHi4ivRUEkK6qbegQevF",
                          opId: "5df622fa-bcb3-48c3-b0bf-51f41af19ca7",
                          userArgs: {
                            keys: [$queries.teamP.data[0].id],
                            variables: [
                              $queries.teamP.data[0].balance +
                                $queries.player.data[$state.playerId - 1]
                                  .market_value
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["revertMoney"] != null &&
                  typeof $steps["revertMoney"] === "object" &&
                  typeof $steps["revertMoney"].then === "function"
                ) {
                  $steps["revertMoney"] = await $steps["revertMoney"];
                }

                $steps["upadateActivity"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "8cdHi4ivRUEkK6qbegQevF",
                          opId: "91020635-a445-466e-9689-42d162095ebd",
                          userArgs: {
                            variables: [
                              $queries.teamP.data[0].id,
                              "You Seld " +
                                $queries.player.data[$state.playerId - 1].name +
                                " for $" +
                                $queries.player.data[$state.playerId - 1]
                                  .market_value
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["upadateActivity"] != null &&
                  typeof $steps["upadateActivity"] === "object" &&
                  typeof $steps["upadateActivity"].then === "function"
                ) {
                  $steps["upadateActivity"] = await $steps["upadateActivity"];
                }
              }}
              onOpenChange={generateStateOnChangeProp($state, [
                "modal",
                "open"
              ])}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={"Do you Want Sell this player?"}
              trigger={
                (() => {
                  try {
                    return $state.sellBtnBool;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__ahFXh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8Tten
                      )}
                    >
                      {"Sell"}
                    </div>
                  </AntdButton>
                ) : null
              }
              wrapClassName={classNames({ [sty["pcls_Ptl9_TeQa_Ax"]]: true })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__spkbu)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sFdYt
                  )}
                >
                  {"Modal content"}
                </div>
              </div>
            </AntdModal>
            {(() => {
              try {
                return $state.capitanBtnVisibility;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <UpdateCapitan
                data-plasmic-name={"updateCapitan"}
                data-plasmic-override={overrides.updateCapitan}
                acceptBtn={async () => {
                  const $steps = {};

                  $steps["postgresUpdateById"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "8cdHi4ivRUEkK6qbegQevF",
                            opId: "4b1abc61-a700-4204-8274-7ede68ac93c7",
                            userArgs: {
                              keys: [$state.teamplayerstate]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresUpdateById"] != null &&
                    typeof $steps["postgresUpdateById"] === "object" &&
                    typeof $steps["postgresUpdateById"].then === "function"
                  ) {
                    $steps["postgresUpdateById"] = await $steps[
                      "postgresUpdateById"
                    ];
                  }
                }}
                className={classNames("__wab_instance", sty.updateCapitan)}
              />
            ) : null}
          </Stack__>
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__wtIiA)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aUurg
                )}
              >
                {"Line-Up"}
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
                2, 3, 4
              ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <AntdDropdown
                    data-plasmic-name={"_532"}
                    data-plasmic-override={overrides._532}
                    className={classNames("__wab_instance", sty._532)}
                    dropdownMenuScopeClassName={sty["_532__dropdownMenu"]}
                    fakeOpen={false}
                    key={currentIndex}
                    menuItems={() => (
                      <React.Fragment>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__yHZg2
                          )}
                          key={"menu-item-1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__n6PxQ
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__gb7Ov
                          )}
                          key={"menu-item-2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ioQc
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                      </React.Fragment>
                    )}
                    menuItemsJson={(() => {
                      const __composite = [
                        { type: "item", value: "action1", label: null },
                        { type: "item", value: "action2", label: null }
                      ];
                      __composite["0"]["label"] = "4-2-2-3";
                      __composite["1"]["label"] = "1-5-2-3";
                      return __composite;
                    })()}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__jbZUg
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dtZNz
                        )}
                      >
                        {"Dropdown"}
                      </div>
                    </AntdButton>
                  </AntdDropdown>
                );
              })}
              <div className={classNames(projectcss.all, sty.freeBox__u1Zqe)}>
                <div className={classNames(projectcss.all, sty.freeBox__iw1Nk)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6S8Gg)}
                  >
                    <div
                      data-plasmic-name={"goa"}
                      data-plasmic-override={overrides.goa}
                      className={classNames(projectcss.all, sty.goa)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dcpmG
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.goa.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <AvatarPlayer
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayer__uvTA
                              )}
                              clickOn={async event => {
                                const $steps = {};

                                $steps["teamPlayerPosition"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["inputState"]
                                        },
                                        operation: 0,
                                        value: currentItem.position
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["teamPlayerPosition"] != null &&
                                  typeof $steps["teamPlayerPosition"] ===
                                    "object" &&
                                  typeof $steps["teamPlayerPosition"].then ===
                                    "function"
                                ) {
                                  $steps["teamPlayerPosition"] = await $steps[
                                    "teamPlayerPosition"
                                  ];
                                }

                                $steps["teamPlayerId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["teamplayerstate"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["teamPlayerId"] != null &&
                                  typeof $steps["teamPlayerId"] === "object" &&
                                  typeof $steps["teamPlayerId"].then ===
                                    "function"
                                ) {
                                  $steps["teamPlayerId"] = await $steps[
                                    "teamPlayerId"
                                  ];
                                }

                                $steps["sellBtnBool"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["sellBtnBool"]
                                        },
                                        operation: 0,
                                        value: currentItem.sell
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["sellBtnBool"] != null &&
                                  typeof $steps["sellBtnBool"] === "object" &&
                                  typeof $steps["sellBtnBool"].then ===
                                    "function"
                                ) {
                                  $steps["sellBtnBool"] = await $steps[
                                    "sellBtnBool"
                                  ];
                                }

                                $steps["playerId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["playerId"]
                                        },
                                        operation: 0,
                                        value: currentItem.player_id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["playerId"] != null &&
                                  typeof $steps["playerId"] === "object" &&
                                  typeof $steps["playerId"].then === "function"
                                ) {
                                  $steps["playerId"] = await $steps["playerId"];
                                }

                                $steps["capitanVisibility"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["capitanBtnVisibility"]
                                        },
                                        operation: 0,
                                        value: !currentItem.is_captain
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["capitanVisibility"] != null &&
                                  typeof $steps["capitanVisibility"] ===
                                    "object" &&
                                  typeof $steps["capitanVisibility"].then ===
                                    "function"
                                ) {
                                  $steps["capitanVisibility"] = await $steps[
                                    "capitanVisibility"
                                  ];
                                }
                              }}
                              clubLogo={(() => {
                                try {
                                  return $queries.clubs.data[
                                    $queries.player.data[
                                      currentItem.player_id - 1
                                    ].club_id - 1
                                  ].flag_url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return {
                                      src: "/plasmic/proliga/images/logoDesignTemplateB588De7Cc0B07E82392C3B2Ea4Ea7B73Screenjpg.jpg",
                                      fullWidth: 690,
                                      fullHeight: 690,
                                      aspectRatio: undefined
                                    };
                                  }
                                  throw e;
                                }
                              })()}
                              image={(() => {
                                try {
                                  return $queries.player.data[
                                    currentItem.player_id - 1
                                  ].image;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "https://fantasy.premierleague.com/dist/img/shirts/standard/shirt_0-66.png";
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                              name={(() => {
                                try {
                                  return $queries.player.data[
                                    currentItem.player_id - 1
                                  ].name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Player";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          );
                        })}
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"def"}
                      data-plasmic-override={overrides.def}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.def)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.def.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vv8U
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayer
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayer__gYokA
                              )}
                              clickOn={async event => {
                                const $steps = {};

                                $steps["updateInputState"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["inputState"]
                                        },
                                        operation: 0,
                                        value: currentItem.position
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateInputState"] != null &&
                                  typeof $steps["updateInputState"] ===
                                    "object" &&
                                  typeof $steps["updateInputState"].then ===
                                    "function"
                                ) {
                                  $steps["updateInputState"] = await $steps[
                                    "updateInputState"
                                  ];
                                }

                                $steps["updateInputState2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["teamplayerstate"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateInputState2"] != null &&
                                  typeof $steps["updateInputState2"] ===
                                    "object" &&
                                  typeof $steps["updateInputState2"].then ===
                                    "function"
                                ) {
                                  $steps["updateInputState2"] = await $steps[
                                    "updateInputState2"
                                  ];
                                }

                                $steps["sellBtnBoll"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["sellBtnBool"]
                                        },
                                        operation: 0,
                                        value: currentItem.sell
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["sellBtnBoll"] != null &&
                                  typeof $steps["sellBtnBoll"] === "object" &&
                                  typeof $steps["sellBtnBoll"].then ===
                                    "function"
                                ) {
                                  $steps["sellBtnBoll"] = await $steps[
                                    "sellBtnBoll"
                                  ];
                                }

                                $steps["playerId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["playerId"]
                                        },
                                        operation: 0,
                                        value: currentItem.player_id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["playerId"] != null &&
                                  typeof $steps["playerId"] === "object" &&
                                  typeof $steps["playerId"].then === "function"
                                ) {
                                  $steps["playerId"] = await $steps["playerId"];
                                }

                                $steps["capitanUpdate"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["capitanBtnVisibility"]
                                        },
                                        operation: 0,
                                        value: !currentItem.is_captain
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["capitanUpdate"] != null &&
                                  typeof $steps["capitanUpdate"] === "object" &&
                                  typeof $steps["capitanUpdate"].then ===
                                    "function"
                                ) {
                                  $steps["capitanUpdate"] = await $steps[
                                    "capitanUpdate"
                                  ];
                                }
                              }}
                              clubLogo={(() => {
                                try {
                                  return $queries.clubs.data[
                                    $queries.player.data[
                                      currentItem.player_id - 1
                                    ].club_id - 1
                                  ].flag_url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return {
                                      src: "/plasmic/proliga/images/logoDesignTemplateB588De7Cc0B07E82392C3B2Ea4Ea7B73Screenjpg.jpg",
                                      fullWidth: 690,
                                      fullHeight: 690,
                                      aspectRatio: undefined
                                    };
                                  }
                                  throw e;
                                }
                              })()}
                              image={(() => {
                                try {
                                  return $queries.player.data[
                                    currentItem.player_id - 1
                                  ].image;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "https://fantasy.premierleague.com/dist/img/shirts/standard/shirt_0-66.png";
                                  }
                                  throw e;
                                }
                              })()}
                              name={(() => {
                                try {
                                  return $queries.player.data[
                                    currentItem.player_id - 1
                                  ].name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Player";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"mid"}
                      data-plasmic-override={overrides.mid}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.mid)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.mid.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ofx2
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayer
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayer__nu6Lx
                              )}
                              clickOn={async event => {
                                const $steps = {};

                                $steps["updateInputState"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["inputState"]
                                        },
                                        operation: 0,
                                        value: currentItem.position
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateInputState"] != null &&
                                  typeof $steps["updateInputState"] ===
                                    "object" &&
                                  typeof $steps["updateInputState"].then ===
                                    "function"
                                ) {
                                  $steps["updateInputState"] = await $steps[
                                    "updateInputState"
                                  ];
                                }

                                $steps["updateInputState2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["teamplayerstate"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateInputState2"] != null &&
                                  typeof $steps["updateInputState2"] ===
                                    "object" &&
                                  typeof $steps["updateInputState2"].then ===
                                    "function"
                                ) {
                                  $steps["updateInputState2"] = await $steps[
                                    "updateInputState2"
                                  ];
                                }

                                $steps["sellBtnBoll"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["sellBtnBool"]
                                        },
                                        operation: 0,
                                        value: currentItem.sell
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["sellBtnBoll"] != null &&
                                  typeof $steps["sellBtnBoll"] === "object" &&
                                  typeof $steps["sellBtnBoll"].then ===
                                    "function"
                                ) {
                                  $steps["sellBtnBoll"] = await $steps[
                                    "sellBtnBoll"
                                  ];
                                }

                                $steps["playerId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["playerId"]
                                        },
                                        operation: 0,
                                        value: currentItem.player_id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["playerId"] != null &&
                                  typeof $steps["playerId"] === "object" &&
                                  typeof $steps["playerId"].then === "function"
                                ) {
                                  $steps["playerId"] = await $steps["playerId"];
                                }

                                $steps["capitanVisibility"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["capitanBtnVisibility"]
                                        },
                                        operation: 0,
                                        value: !currentItem.is_captain
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["capitanVisibility"] != null &&
                                  typeof $steps["capitanVisibility"] ===
                                    "object" &&
                                  typeof $steps["capitanVisibility"].then ===
                                    "function"
                                ) {
                                  $steps["capitanVisibility"] = await $steps[
                                    "capitanVisibility"
                                  ];
                                }
                              }}
                              clubLogo={(() => {
                                try {
                                  return $queries.clubs.data[
                                    $queries.player.data[
                                      currentItem.player_id - 1
                                    ].club_id - 1
                                  ].flag_url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return {
                                      src: "/plasmic/proliga/images/logoDesignTemplateB588De7Cc0B07E82392C3B2Ea4Ea7B73Screenjpg.jpg",
                                      fullWidth: 690,
                                      fullHeight: 690,
                                      aspectRatio: undefined
                                    };
                                  }
                                  throw e;
                                }
                              })()}
                              image={(() => {
                                try {
                                  return $queries.player.data[
                                    currentItem.player_id - 1
                                  ].image;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "https://fantasy.premierleague.com/dist/img/shirts/standard/shirt_0-66.png";
                                  }
                                  throw e;
                                }
                              })()}
                              name={(() => {
                                try {
                                  return $queries.player.data[
                                    currentItem.player_id - 1
                                  ].name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return ``;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"str"}
                      data-plasmic-override={overrides.str}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.str)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.str.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__l1A6S
                            )}
                            key={currentIndex}
                          >
                            <AvatarPlayer
                              capitanVisibility={(() => {
                                try {
                                  return currentItem.is_captain;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarPlayer__jttBq
                              )}
                              clickOn={async event => {
                                const $steps = {};

                                $steps["updateInputState"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["inputState"]
                                        },
                                        operation: 0,
                                        value: currentItem.position
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateInputState"] != null &&
                                  typeof $steps["updateInputState"] ===
                                    "object" &&
                                  typeof $steps["updateInputState"].then ===
                                    "function"
                                ) {
                                  $steps["updateInputState"] = await $steps[
                                    "updateInputState"
                                  ];
                                }

                                $steps["updateInputState2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["teamplayerstate"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateInputState2"] != null &&
                                  typeof $steps["updateInputState2"] ===
                                    "object" &&
                                  typeof $steps["updateInputState2"].then ===
                                    "function"
                                ) {
                                  $steps["updateInputState2"] = await $steps[
                                    "updateInputState2"
                                  ];
                                }

                                $steps["sellBtnBoll"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["sellBtnBool"]
                                        },
                                        operation: 0,
                                        value: currentItem.sell
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["sellBtnBoll"] != null &&
                                  typeof $steps["sellBtnBoll"] === "object" &&
                                  typeof $steps["sellBtnBoll"].then ===
                                    "function"
                                ) {
                                  $steps["sellBtnBoll"] = await $steps[
                                    "sellBtnBoll"
                                  ];
                                }

                                $steps["playerId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["playerId"]
                                        },
                                        operation: 0,
                                        value: currentItem.player_id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["playerId"] != null &&
                                  typeof $steps["playerId"] === "object" &&
                                  typeof $steps["playerId"].then === "function"
                                ) {
                                  $steps["playerId"] = await $steps["playerId"];
                                }

                                $steps["capitanVisibility"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["capitanBtnVisibility"]
                                        },
                                        operation: 0,
                                        value: !currentItem.is_captain
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["capitanVisibility"] != null &&
                                  typeof $steps["capitanVisibility"] ===
                                    "object" &&
                                  typeof $steps["capitanVisibility"].then ===
                                    "function"
                                ) {
                                  $steps["capitanVisibility"] = await $steps[
                                    "capitanVisibility"
                                  ];
                                }
                              }}
                              clubLogo={(() => {
                                try {
                                  return $queries.clubs.data[
                                    $queries.player.data[
                                      currentItem.player_id - 1
                                    ].club_id - 1
                                  ].flag_url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return {
                                      src: "/plasmic/proliga/images/logoDesignTemplateB588De7Cc0B07E82392C3B2Ea4Ea7B73Screenjpg.jpg",
                                      fullWidth: 690,
                                      fullHeight: 690,
                                      aspectRatio: undefined
                                    };
                                  }
                                  throw e;
                                }
                              })()}
                              image={(() => {
                                try {
                                  return $queries.player.data[
                                    currentItem.player_id - 1
                                  ].image;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "https://fantasy.premierleague.com/dist/img/shirts/standard/shirt_0-66.png";
                                  }
                                  throw e;
                                }
                              })()}
                              name={(() => {
                                try {
                                  return $queries.player.data[
                                    currentItem.player_id - 1
                                  ].name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Player";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                  </Stack__>
                  <SoccerPlaceMens2
                    data-plasmic-name={"soccerPlaceMens2"}
                    data-plasmic-override={overrides.soccerPlaceMens2}
                    className={classNames(
                      "__wab_instance",
                      sty.soccerPlaceMens2
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__oTuO)}
                  />
                </div>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__wTiGc)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__peasw)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r9E
                  )}
                >
                  {"Squad"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6HiPo)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fjj5R
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            "Player(" +
                            $queries.pickedPlayersCount.data.length +
                            "/11)"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Players";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__u55K7)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__tjnjF
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"ALL"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__llnkR
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"GOA"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__yKoXy
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"DEF"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__urgD1
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"MID"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__xEuMz
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"STR"}
                </PlasmicLink__>
              </Stack__>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.pickplayer.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <PlayerPickerRow
                    data-plasmic-name={"playerPickerRow"}
                    data-plasmic-override={overrides.playerPickerRow}
                    className={classNames(
                      "__wab_instance",
                      sty.playerPickerRow
                    )}
                    clubImage={(() => {
                      try {
                        return $queries.clubs.data[currentItem.club_id - 1]
                          .flag_url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/proliga/images/logoDesignTemplateB588De7Cc0B07E82392C3B2Ea4Ea7B73Screenjpg.jpg",
                            fullWidth: 690,
                            fullHeight: 690,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                    firstImage={(() => {
                      try {
                        return currentItem.image;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    fsyp={(() => {
                      try {
                        return currentItem.FSYP;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    modalCancelBtn={async () => {
                      const $steps = {};
                    }}
                    modalContent={(() => {
                      try {
                        return (
                          "Market value: $" +
                          currentItem.market_value +
                          " Name: " +
                          currentItem.name
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    modalOkBtn={async () => {
                      const $steps = {};

                      $steps["updateMoney"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "8cdHi4ivRUEkK6qbegQevF",
                                opId: "5df622fa-bcb3-48c3-b0bf-51f41af19ca7",
                                userArgs: {
                                  keys: [$queries.teamP.data[0].id],
                                  variables: [
                                    $queries.teamP.data[0].balance -
                                      currentItem.market_value
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMoney"] != null &&
                        typeof $steps["updateMoney"] === "object" &&
                        typeof $steps["updateMoney"].then === "function"
                      ) {
                        $steps["updateMoney"] = await $steps["updateMoney"];
                      }

                      $steps["updatePlayer"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "8cdHi4ivRUEkK6qbegQevF",
                                opId: "3dd1e590-3ad8-43f8-a6f0-fe6eca352a85",
                                userArgs: {
                                  keys: [$state.teamplayerstate],
                                  variables: [
                                    currentItem.id,
                                    currentItem.position
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePlayer"] != null &&
                        typeof $steps["updatePlayer"] === "object" &&
                        typeof $steps["updatePlayer"].then === "function"
                      ) {
                        $steps["updatePlayer"] = await $steps["updatePlayer"];
                      }

                      $steps["updateUserActivity"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "8cdHi4ivRUEkK6qbegQevF",
                                opId: "91020635-a445-466e-9689-42d162095ebd",
                                userArgs: {
                                  variables: [
                                    $queries.teamP.data[0].id,
                                    "You Bought " +
                                      currentItem.name +
                                      " for $" +
                                      currentItem.market_value
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUserActivity"] != null &&
                        typeof $steps["updateUserActivity"] === "object" &&
                        typeof $steps["updateUserActivity"].then === "function"
                      ) {
                        $steps["updateUserActivity"] = await $steps[
                          "updateUserActivity"
                        ];
                      }
                    }}
                    modalTitle={(() => {
                      try {
                        return "Are you sure you want to buy this player?";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Modal Title";
                        }
                        throw e;
                      }
                    })()}
                    name={(() => {
                      try {
                        return currentItem.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    position={(() => {
                      try {
                        return currentItem.position;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    price={(() => {
                      try {
                        return currentItem.market_value;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })}
            </Stack__>
          </div>
          <SideBarMyTeam
            data-plasmic-name={"sideBarMyTeam"}
            data-plasmic-override={overrides.sideBarMyTeam}
            className={classNames("__wab_instance", sty.sideBarMyTeam)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "modal",
    "updateCapitan",
    "columns",
    "_532",
    "goa",
    "def",
    "mid",
    "str",
    "soccerPlaceMens2",
    "playerPickerRow",
    "sideBarMyTeam",
    "footer"
  ],
  navbar: ["navbar"],
  modal: ["modal"],
  updateCapitan: ["updateCapitan"],
  columns: [
    "columns",
    "_532",
    "goa",
    "def",
    "mid",
    "str",
    "soccerPlaceMens2",
    "playerPickerRow"
  ],
  _532: ["_532"],
  goa: ["goa"],
  def: ["def"],
  mid: ["mid"],
  str: ["str"],
  soccerPlaceMens2: ["soccerPlaceMens2"],
  playerPickerRow: ["playerPickerRow"],
  sideBarMyTeam: ["sideBarMyTeam"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  modal: typeof AntdModal;
  updateCapitan: typeof UpdateCapitan;
  columns: "div";
  _532: typeof AntdDropdown;
  goa: "div";
  def: "div";
  mid: "div";
  str: "div";
  soccerPlaceMens2: typeof SoccerPlaceMens2;
  playerPickerRow: typeof PlayerPickerRow;
  sideBarMyTeam: typeof SideBarMyTeam;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeams__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeams__VariantsArgs;
    args?: PlasmicTeams__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeams__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTeams__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTeams__ArgProps,
          internalVariantPropNames: PlasmicTeams__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTeams__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeams";
  } else {
    func.displayName = `PlasmicTeams.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicTeams = Object.assign(
  // Top-level PlasmicTeams renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    modal: makeNodeComponent("modal"),
    updateCapitan: makeNodeComponent("updateCapitan"),
    columns: makeNodeComponent("columns"),
    _532: makeNodeComponent("_532"),
    goa: makeNodeComponent("goa"),
    def: makeNodeComponent("def"),
    mid: makeNodeComponent("mid"),
    str: makeNodeComponent("str"),
    soccerPlaceMens2: makeNodeComponent("soccerPlaceMens2"),
    playerPickerRow: makeNodeComponent("playerPickerRow"),
    sideBarMyTeam: makeNodeComponent("sideBarMyTeam"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicTeams
    internalVariantProps: PlasmicTeams__VariantProps,
    internalArgProps: PlasmicTeams__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTeams;
/* prettier-ignore-end */
