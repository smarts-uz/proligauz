// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: 0Wn5PD6iZBUT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import Clubs2 from "../../Clubs2"; // plasmic-import: 3EueAFP_3sEI/component
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../proliga_clone/plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicPlayerInfo.module.css"; // plasmic-import: 0Wn5PD6iZBUT/css

createPlasmicElementProxy;

export type PlasmicPlayerInfo__VariantMembers = {};
export type PlasmicPlayerInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicPlayerInfo__VariantsArgs;
export const PlasmicPlayerInfo__VariantProps = new Array<VariantPropType>();

export type PlasmicPlayerInfo__ArgsType = {};
type ArgPropType = keyof PlasmicPlayerInfo__ArgsType;
export const PlasmicPlayerInfo__ArgProps = new Array<ArgPropType>();

export type PlasmicPlayerInfo__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  clubs2?: Flex__<typeof Clubs2>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  chart?: Flex__<typeof SimpleChart>;
};

export interface DefaultPlayerInfoProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPlayerInfo__RenderFunc(props: {
  variants: PlasmicPlayerInfo__VariantsArgs;
  args: PlasmicPlayerInfo__ArgsType;
  overrides: PlasmicPlayerInfo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "96905bf4-1594-4d5e-88bf-ff565f04d043",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.96905bf4-1594-4d5e-88bf-ff565f04d043.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Clubs2
            data-plasmic-name={"clubs2"}
            data-plasmic-override={overrides.clubs2}
            className={classNames("__wab_instance", sty.clubs2)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__uhOzD)}>
            <div className={classNames(projectcss.all, sty.freeBox__xC2PH)}>
              <div className={classNames(projectcss.all, sty.freeBox__xdMCu)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___0OoC)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"329px"}
                  height={"214px"}
                  loading={"lazy"}
                  src={$queries.query.data[0].image}
                  width={"214px"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___0CmUs)}>
                <div className={classNames(projectcss.all, sty.freeBox__tnxJ)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qzn9Z)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wYltr
                      )}
                    >
                      {"Position"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tXebw
                      )}
                    >
                      {"FSYP"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yfCB)}
                  >
                    <PlasmicLink__
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link
                      )}
                      component={Link}
                      href={"https://www.plasmic.app/"}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        {$queries.query.data[0].position}
                      </React.Fragment>
                    </PlasmicLink__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fiSj
                      )}
                    >
                      <React.Fragment>
                        {$queries.query.data[0].name}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1J5Jj
                      )}
                    >
                      {"92"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fbX8B)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vLuJj
                      )}
                    >
                      {"Value"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j08Jk
                      )}
                    >
                      {"Average"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vuD6M)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__cgS9C)}
                      displayHeight={"14px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"14px"}
                      height={"14px"}
                      loading={"lazy"}
                      src={
                        "https://www.iconpacks.net/icons/1/free-euro-icon-795-thumb.png"
                      }
                      width={"14px"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ru4Cf
                      )}
                    >
                      <React.Fragment>
                        {$queries.query.data[0].market_value}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1N3Wx
                      )}
                    >
                      {"7.08"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <SimpleChart
              data-plasmic-name={"chart"}
              data-plasmic-override={overrides.chart}
              className={classNames("__wab_instance", sty.chart)}
              data={[
                { region: "APAC", revenue: 3294, spend: 2675 },
                { region: "EMEA", revenue: 3245, spend: 3895 },
                { region: "LATAM", revenue: 2165, spend: 3498 },
                { region: "AMER", revenue: 3215, spend: 1656 }
              ]}
              labelField={"spend"}
              type={"line"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "clubs2", "link", "chart"],
  navbar: ["navbar"],
  clubs2: ["clubs2"],
  link: ["link"],
  chart: ["chart"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  clubs2: typeof Clubs2;
  link: "a";
  chart: typeof SimpleChart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPlayerInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPlayerInfo__VariantsArgs;
    args?: PlasmicPlayerInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPlayerInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPlayerInfo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPlayerInfo__ArgProps,
          internalVariantPropNames: PlasmicPlayerInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPlayerInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPlayerInfo";
  } else {
    func.displayName = `PlasmicPlayerInfo.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicPlayerInfo = Object.assign(
  // Top-level PlasmicPlayerInfo renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    clubs2: makeNodeComponent("clubs2"),
    link: makeNodeComponent("link"),
    chart: makeNodeComponent("chart"),

    // Metadata about props expected for PlasmicPlayerInfo
    internalVariantProps: PlasmicPlayerInfo__VariantProps,
    internalArgProps: PlasmicPlayerInfo__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPlayerInfo;
/* prettier-ignore-end */
