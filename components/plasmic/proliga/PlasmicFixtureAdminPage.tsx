// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: GFedZJdOZJVw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import AdminNavbar from "../../AdminNavbar"; // plasmic-import: a1eyFQc8LDBj/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../proliga_clone/plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicFixtureAdminPage.module.css"; // plasmic-import: GFedZJdOZJVw/css

createPlasmicElementProxy;

export type PlasmicFixtureAdminPage__VariantMembers = {};
export type PlasmicFixtureAdminPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicFixtureAdminPage__VariantsArgs;
export const PlasmicFixtureAdminPage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFixtureAdminPage__ArgsType = {};
type ArgPropType = keyof PlasmicFixtureAdminPage__ArgsType;
export const PlasmicFixtureAdminPage__ArgProps = new Array<ArgPropType>();

export type PlasmicFixtureAdminPage__OverridesType = {
  root?: Flex__<"div">;
  adminNavbar?: Flex__<typeof AdminNavbar>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  text?: Flex__<"div">;
  createFixture?: Flex__<"div">;
};

export interface DefaultFixtureAdminPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFixtureAdminPage__RenderFunc(props: {
  variants: PlasmicFixtureAdminPage__VariantsArgs;
  args: PlasmicFixtureAdminPage__ArgsType;
  overrides: PlasmicFixtureAdminPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    fixture: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "0dd63023-2e85-42cd-a128-bc962b7e06c6",
        userArgs: {},
        cacheKey: `plasmic.$.0dd63023-2e85-42cd-a128-bc962b7e06c6.$.`,
        invalidatedKeys: null,
        roleId: "810e4a25-58ee-4068-9525-5f2968d1853a"
      };
    }),
    compotition: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "a497b8d8-20d7-46a9-9ee0-80c6658405cd",
        userArgs: {},
        cacheKey: `plasmic.$.a497b8d8-20d7-46a9-9ee0-80c6658405cd.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <AdminNavbar
            data-plasmic-name={"adminNavbar"}
            data-plasmic-override={overrides.adminNavbar}
            className={classNames("__wab_instance", sty.adminNavbar)}
          />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={"Modal title"}
            trigger={
              <AntdButton
                className={classNames("__wab_instance", sty.button___6TE8N)}
              >
                <div
                  data-plasmic-name={"createFixture"}
                  data-plasmic-override={overrides.createFixture}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.createFixture
                  )}
                >
                  {"Create Fixture"}
                </div>
              </AntdButton>
            }
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                data: {
                  sourceId: "8cdHi4ivRUEkK6qbegQevF",
                  opId: "381b0235-f66d-46b6-bc23-a39108e83ad0",
                  userArgs: {},
                  cacheKey: `plasmic.$.${(() => {
                    try {
                      return "getSchema";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}.$.381b0235-f66d-46b6-bc23-a39108e83ad0.$.`,
                  invalidatedKeys: null,
                  roleId: null
                },
                dataFormItems: (() => {
                  const __composite = [
                    {
                      key: "id",
                      inputType: "Number",
                      fieldId: "id",
                      label: "id",
                      name: "id",
                      hidden: null
                    },
                    {
                      key: "number",
                      inputType: "Text",
                      fieldId: "number",
                      label: "number",
                      name: "number"
                    },
                    {
                      key: "competition_id",
                      inputType: "Number",
                      fieldId: "competition_id",
                      label: "competition_id",
                      name: "competition_id"
                    },
                    {
                      key: "id",
                      inputType: "Number",
                      fieldId: "id",
                      label: "id",
                      name: "id",
                      hidden: null
                    }
                  ];
                  __composite["0"]["hidden"] = true;
                  __composite["3"]["hidden"] = true;
                  return __composite;
                })(),

                extendedOnValuesChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ),
                formItems: [],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "simplified",
                onFinish: async values => {
                  const $steps = {};

                  $steps["defaultSubmit"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "8cdHi4ivRUEkK6qbegQevF",
                            opId: "beafbda4-0d4b-459e-a9ad-f2b0f96cb40b",
                            userArgs: {
                              variables: [$state.form.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["defaultSubmit"] != null &&
                    typeof $steps["defaultSubmit"] === "object" &&
                    typeof $steps["defaultSubmit"].then === "function"
                  ) {
                    $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                  }
                },
                onIsSubmittingChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ),
                ref: ref => {
                  $refs["form"] = ref;
                },
                submitSlot: (
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__ym3OM)}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                ),
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                />
              );
            })()}
          </AntdModal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "adminNavbar", "modal", "form", "text", "createFixture"],
  adminNavbar: ["adminNavbar"],
  modal: ["modal", "form", "text", "createFixture"],
  form: ["form", "text"],
  text: ["text"],
  createFixture: ["createFixture"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  adminNavbar: typeof AdminNavbar;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  text: "div";
  createFixture: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFixtureAdminPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFixtureAdminPage__VariantsArgs;
    args?: PlasmicFixtureAdminPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFixtureAdminPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFixtureAdminPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFixtureAdminPage__ArgProps,
          internalVariantPropNames: PlasmicFixtureAdminPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFixtureAdminPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFixtureAdminPage";
  } else {
    func.displayName = `PlasmicFixtureAdminPage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicFixtureAdminPage = Object.assign(
  // Top-level PlasmicFixtureAdminPage renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    adminNavbar: makeNodeComponent("adminNavbar"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    text: makeNodeComponent("text"),
    createFixture: makeNodeComponent("createFixture"),

    // Metadata about props expected for PlasmicFixtureAdminPage
    internalVariantProps: PlasmicFixtureAdminPage__VariantProps,
    internalArgProps: PlasmicFixtureAdminPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFixtureAdminPage;
/* prettier-ignore-end */
